/*
 * This file is generated by jOOQ.
 */
package com.tiemenv.digitalwallet.infrastructure.storage.jooq.tables.records;


import com.tiemenv.digitalwallet.infrastructure.storage.jooq.enums.Currency;
import com.tiemenv.digitalwallet.infrastructure.storage.jooq.enums.TransactionType;
import com.tiemenv.digitalwallet.infrastructure.storage.jooq.tables.Transactions;

import java.sql.Timestamp;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionsRecord extends UpdatableRecordImpl<TransactionsRecord> implements Record6<UUID, UUID, TransactionType, Double, Currency, Timestamp> {

    private static final long serialVersionUID = 1403041772;

    /**
     * Setter for <code>public.transactions.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.transactions.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.transactions.wallet_id</code>.
     */
    public void setWalletId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.transactions.wallet_id</code>.
     */
    public UUID getWalletId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.transactions.type</code>.
     */
    public void setType(TransactionType value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.transactions.type</code>.
     */
    public TransactionType getType() {
        return (TransactionType) get(2);
    }

    /**
     * Setter for <code>public.transactions.amount</code>.
     */
    public void setAmount(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.transactions.amount</code>.
     */
    public Double getAmount() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>public.transactions.currency</code>.
     */
    public void setCurrency(Currency value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.transactions.currency</code>.
     */
    public Currency getCurrency() {
        return (Currency) get(4);
    }

    /**
     * Setter for <code>public.transactions.created_at</code>.
     */
    public void setCreatedAt(Timestamp value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.transactions.created_at</code>.
     */
    public Timestamp getCreatedAt() {
        return (Timestamp) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, TransactionType, Double, Currency, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<UUID, UUID, TransactionType, Double, Currency, Timestamp> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Transactions.TRANSACTIONS.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Transactions.TRANSACTIONS.WALLET_ID;
    }

    @Override
    public Field<TransactionType> field3() {
        return Transactions.TRANSACTIONS.TYPE;
    }

    @Override
    public Field<Double> field4() {
        return Transactions.TRANSACTIONS.AMOUNT;
    }

    @Override
    public Field<Currency> field5() {
        return Transactions.TRANSACTIONS.CURRENCY;
    }

    @Override
    public Field<Timestamp> field6() {
        return Transactions.TRANSACTIONS.CREATED_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getWalletId();
    }

    @Override
    public TransactionType component3() {
        return getType();
    }

    @Override
    public Double component4() {
        return getAmount();
    }

    @Override
    public Currency component5() {
        return getCurrency();
    }

    @Override
    public Timestamp component6() {
        return getCreatedAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getWalletId();
    }

    @Override
    public TransactionType value3() {
        return getType();
    }

    @Override
    public Double value4() {
        return getAmount();
    }

    @Override
    public Currency value5() {
        return getCurrency();
    }

    @Override
    public Timestamp value6() {
        return getCreatedAt();
    }

    @Override
    public TransactionsRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public TransactionsRecord value2(UUID value) {
        setWalletId(value);
        return this;
    }

    @Override
    public TransactionsRecord value3(TransactionType value) {
        setType(value);
        return this;
    }

    @Override
    public TransactionsRecord value4(Double value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransactionsRecord value5(Currency value) {
        setCurrency(value);
        return this;
    }

    @Override
    public TransactionsRecord value6(Timestamp value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public TransactionsRecord values(UUID value1, UUID value2, TransactionType value3, Double value4, Currency value5, Timestamp value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionsRecord
     */
    public TransactionsRecord() {
        super(Transactions.TRANSACTIONS);
    }

    /**
     * Create a detached, initialised TransactionsRecord
     */
    public TransactionsRecord(UUID id, UUID walletId, TransactionType type, Double amount, Currency currency, Timestamp createdAt) {
        super(Transactions.TRANSACTIONS);

        set(0, id);
        set(1, walletId);
        set(2, type);
        set(3, amount);
        set(4, currency);
        set(5, createdAt);
    }
}
