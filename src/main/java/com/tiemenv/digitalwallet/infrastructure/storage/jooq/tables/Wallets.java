/*
 * This file is generated by jOOQ.
 */
package com.tiemenv.digitalwallet.infrastructure.storage.jooq.tables;


import com.tiemenv.digitalwallet.infrastructure.storage.jooq.Indexes;
import com.tiemenv.digitalwallet.infrastructure.storage.jooq.Keys;
import com.tiemenv.digitalwallet.infrastructure.storage.jooq.Public;
import com.tiemenv.digitalwallet.infrastructure.storage.jooq.enums.Currency;
import com.tiemenv.digitalwallet.infrastructure.storage.jooq.tables.records.WalletsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Wallets extends TableImpl<WalletsRecord> {

    private static final long serialVersionUID = -30016763;

    /**
     * The reference instance of <code>public.wallets</code>
     */
    public static final Wallets WALLETS = new Wallets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WalletsRecord> getRecordType() {
        return WalletsRecord.class;
    }

    /**
     * The column <code>public.wallets.id</code>.
     */
    public final TableField<WalletsRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v4()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.wallets.user_id</code>.
     */
    public final TableField<WalletsRecord, UUID> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.wallets.balance</code>.
     */
    public final TableField<WalletsRecord, Double> BALANCE = createField(DSL.name("balance"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.wallets.currency</code>.
     */
    public final TableField<WalletsRecord, Currency> CURRENCY = createField(DSL.name("currency"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("'GBP'::currency", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.tiemenv.digitalwallet.infrastructure.storage.jooq.enums.Currency.class), this, "");

    /**
     * The column <code>public.wallets.is_locked</code>.
     */
    public final TableField<WalletsRecord, Boolean> IS_LOCKED = createField(DSL.name("is_locked"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.wallets.created_at</code>.
     */
    public final TableField<WalletsRecord, Timestamp> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>public.wallets</code> table reference
     */
    public Wallets() {
        this(DSL.name("wallets"), null);
    }

    /**
     * Create an aliased <code>public.wallets</code> table reference
     */
    public Wallets(String alias) {
        this(DSL.name(alias), WALLETS);
    }

    /**
     * Create an aliased <code>public.wallets</code> table reference
     */
    public Wallets(Name alias) {
        this(alias, WALLETS);
    }

    private Wallets(Name alias, Table<WalletsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Wallets(Name alias, Table<WalletsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Wallets(Table<O> child, ForeignKey<O, WalletsRecord> key) {
        super(child, key, WALLETS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX___WALLETS___ID, Indexes.IDX___WALLETS___USER_ID, Indexes.PK___WALLET_ID___ID);
    }

    @Override
    public UniqueKey<WalletsRecord> getPrimaryKey() {
        return Keys.PK___WALLET_ID___ID;
    }

    @Override
    public List<UniqueKey<WalletsRecord>> getKeys() {
        return Arrays.<UniqueKey<WalletsRecord>>asList(Keys.PK___WALLET_ID___ID);
    }

    @Override
    public List<ForeignKey<WalletsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WalletsRecord, ?>>asList(Keys.WALLETS__FK___WALLETS___USER_ID);
    }

    public Users users() {
        return new Users(this, Keys.WALLETS__FK___WALLETS___USER_ID);
    }

    @Override
    public Wallets as(String alias) {
        return new Wallets(DSL.name(alias), this);
    }

    @Override
    public Wallets as(Name alias) {
        return new Wallets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallets rename(String name) {
        return new Wallets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallets rename(Name name) {
        return new Wallets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, Double, Currency, Boolean, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
